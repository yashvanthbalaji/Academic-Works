// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/09/2024 00:10:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Boolean_min
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Boolean_min_vlg_sample_tst(
	a,
	b,
	c,
	d,
	w,
	x,
	y,
	z,
	sampler_tx
);
input  a;
input  b;
input  c;
input  d;
input  w;
input  x;
input  y;
input  z;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c or d or w or x or y or z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Boolean_min_vlg_check_tst (
	f1,
	f2,
	sampler_rx
);
input  f1;
input  f2;
input sampler_rx;

reg  f1_expected;
reg  f2_expected;

reg  f1_prev;
reg  f2_prev;

reg  f1_expected_prev;
reg  f2_expected_prev;

reg  last_f1_exp;
reg  last_f2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	f1_prev = f1;
	f2_prev = f2;
end

// update expected /o prevs

always @(trigger)
begin
	f1_expected_prev = f1_expected;
	f2_expected_prev = f2_expected;
end



// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected f2
initial
begin
	f2_expected = 1'bX;
end 
// generate trigger
always @(f1_expected or f1 or f2_expected or f2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected f1 = %b | expected f2 = %b | ",f1_expected_prev,f2_expected_prev);
	$display("| real f1 = %b | real f2 = %b | ",f1_prev,f2_prev);
`endif
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( f2_expected_prev !== 1'bx ) && ( f2_prev !== f2_expected_prev )
		&& ((f2_expected_prev !== last_f2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f2_expected_prev);
		$display ("     Real value = %b", f2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f2_exp = f2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Boolean_min_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
reg w;
reg x;
reg y;
reg z;
// wires                                               
wire f1;
wire f2;

wire sampler;                             

// assign statements (if any)                          
Boolean_min i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.f1(f1),
	.f2(f2),
	.w(w),
	.x(x),
	.y(y),
	.z(z)
);

// a
initial
begin
	a = 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #120000 1'b1;
	b = #60000 1'b0;
end 

// c
initial
begin
	c = 1'b0;
	c = #60000 1'b1;
	c = #60000 1'b0;
end 

// d
initial
begin
	d = 1'b0;
	d = #30000 1'b1;
	d = #30000 1'b0;
	d = #30000 1'b1;
	d = #30000 1'b0;
	d = #30000 1'b1;
	d = #30000 1'b0;
end 

// w
initial
begin
	w = 1'b0;
end 

// x
initial
begin
	x = 1'b0;
	x = #120000 1'b1;
	x = #60000 1'b0;
end 

// y
initial
begin
	y = 1'b0;
	y = #60000 1'b1;
	y = #60000 1'b0;
end 

// z
initial
begin
	z = 1'b0;
	z = #30000 1'b1;
	z = #30000 1'b0;
	z = #30000 1'b1;
	z = #30000 1'b0;
	z = #30000 1'b1;
	z = #30000 1'b0;
end 

Boolean_min_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.w(w),
	.x(x),
	.y(y),
	.z(z),
	.sampler_tx(sampler)
);

Boolean_min_vlg_check_tst tb_out(
	.f1(f1),
	.f2(f2),
	.sampler_rx(sampler)
);
endmodule


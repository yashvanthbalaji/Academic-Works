// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/09/2024 19:45:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    GATES_TT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GATES_TT_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input  a;
input  b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module GATES_TT_vlg_check_tst (
	andgate,
	nandgate,
	norgate,
	notgate,
	orgate,
	xnorgate,
	xorgate,
	sampler_rx
);
input  andgate;
input  nandgate;
input  norgate;
input  notgate;
input  orgate;
input  xnorgate;
input  xorgate;
input sampler_rx;

reg  andgate_expected;
reg  nandgate_expected;
reg  norgate_expected;
reg  notgate_expected;
reg  orgate_expected;
reg  xnorgate_expected;
reg  xorgate_expected;

reg  andgate_prev;
reg  nandgate_prev;
reg  norgate_prev;
reg  notgate_prev;
reg  orgate_prev;
reg  xnorgate_prev;
reg  xorgate_prev;

reg  andgate_expected_prev;
reg  nandgate_expected_prev;
reg  norgate_expected_prev;
reg  notgate_expected_prev;
reg  orgate_expected_prev;
reg  xnorgate_expected_prev;
reg  xorgate_expected_prev;

reg  last_andgate_exp;
reg  last_nandgate_exp;
reg  last_norgate_exp;
reg  last_notgate_exp;
reg  last_orgate_exp;
reg  last_xnorgate_exp;
reg  last_xorgate_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	andgate_prev = andgate;
	nandgate_prev = nandgate;
	norgate_prev = norgate;
	notgate_prev = notgate;
	orgate_prev = orgate;
	xnorgate_prev = xnorgate;
	xorgate_prev = xorgate;
end

// update expected /o prevs

always @(trigger)
begin
	andgate_expected_prev = andgate_expected;
	nandgate_expected_prev = nandgate_expected;
	norgate_expected_prev = norgate_expected;
	notgate_expected_prev = notgate_expected;
	orgate_expected_prev = orgate_expected;
	xnorgate_expected_prev = xnorgate_expected;
	xorgate_expected_prev = xorgate_expected;
end



// expected notgate
initial
begin
	notgate_expected = 1'bX;
end 

// expected andgate
initial
begin
	andgate_expected = 1'bX;
end 

// expected nandgate
initial
begin
	nandgate_expected = 1'bX;
end 

// expected orgate
initial
begin
	orgate_expected = 1'bX;
end 

// expected norgate
initial
begin
	norgate_expected = 1'bX;
end 

// expected xorgate
initial
begin
	xorgate_expected = 1'bX;
end 

// expected xnorgate
initial
begin
	xnorgate_expected = 1'bX;
end 
// generate trigger
always @(andgate_expected or andgate or nandgate_expected or nandgate or norgate_expected or norgate or notgate_expected or notgate or orgate_expected or orgate or xnorgate_expected or xnorgate or xorgate_expected or xorgate)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected andgate = %b | expected nandgate = %b | expected norgate = %b | expected notgate = %b | expected orgate = %b | expected xnorgate = %b | expected xorgate = %b | ",andgate_expected_prev,nandgate_expected_prev,norgate_expected_prev,notgate_expected_prev,orgate_expected_prev,xnorgate_expected_prev,xorgate_expected_prev);
	$display("| real andgate = %b | real nandgate = %b | real norgate = %b | real notgate = %b | real orgate = %b | real xnorgate = %b | real xorgate = %b | ",andgate_prev,nandgate_prev,norgate_prev,notgate_prev,orgate_prev,xnorgate_prev,xorgate_prev);
`endif
	if (
		( andgate_expected_prev !== 1'bx ) && ( andgate_prev !== andgate_expected_prev )
		&& ((andgate_expected_prev !== last_andgate_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port andgate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", andgate_expected_prev);
		$display ("     Real value = %b", andgate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_andgate_exp = andgate_expected_prev;
	end
	if (
		( nandgate_expected_prev !== 1'bx ) && ( nandgate_prev !== nandgate_expected_prev )
		&& ((nandgate_expected_prev !== last_nandgate_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nandgate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nandgate_expected_prev);
		$display ("     Real value = %b", nandgate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_nandgate_exp = nandgate_expected_prev;
	end
	if (
		( norgate_expected_prev !== 1'bx ) && ( norgate_prev !== norgate_expected_prev )
		&& ((norgate_expected_prev !== last_norgate_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port norgate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", norgate_expected_prev);
		$display ("     Real value = %b", norgate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_norgate_exp = norgate_expected_prev;
	end
	if (
		( notgate_expected_prev !== 1'bx ) && ( notgate_prev !== notgate_expected_prev )
		&& ((notgate_expected_prev !== last_notgate_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port notgate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", notgate_expected_prev);
		$display ("     Real value = %b", notgate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_notgate_exp = notgate_expected_prev;
	end
	if (
		( orgate_expected_prev !== 1'bx ) && ( orgate_prev !== orgate_expected_prev )
		&& ((orgate_expected_prev !== last_orgate_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port orgate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", orgate_expected_prev);
		$display ("     Real value = %b", orgate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_orgate_exp = orgate_expected_prev;
	end
	if (
		( xnorgate_expected_prev !== 1'bx ) && ( xnorgate_prev !== xnorgate_expected_prev )
		&& ((xnorgate_expected_prev !== last_xnorgate_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xnorgate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xnorgate_expected_prev);
		$display ("     Real value = %b", xnorgate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xnorgate_exp = xnorgate_expected_prev;
	end
	if (
		( xorgate_expected_prev !== 1'bx ) && ( xorgate_prev !== xorgate_expected_prev )
		&& ((xorgate_expected_prev !== last_xorgate_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xorgate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xorgate_expected_prev);
		$display ("     Real value = %b", xorgate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_xorgate_exp = xorgate_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module GATES_TT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
// wires                                               
wire andgate;
wire nandgate;
wire norgate;
wire notgate;
wire orgate;
wire xnorgate;
wire xorgate;

wire sampler;                             

// assign statements (if any)                          
GATES_TT i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.andgate(andgate),
	.b(b),
	.nandgate(nandgate),
	.norgate(norgate),
	.notgate(notgate),
	.orgate(orgate),
	.xnorgate(xnorgate),
	.xorgate(xorgate)
);

// a
initial
begin
	a = 1'b0;
	a = #40000 1'b1;
	a = #40000 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #20000 1'b1;
	b = #20000 1'b0;
	b = #20000 1'b1;
	b = #20000 1'b0;
end 

GATES_TT_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

GATES_TT_vlg_check_tst tb_out(
	.andgate(andgate),
	.nandgate(nandgate),
	.norgate(norgate),
	.notgate(notgate),
	.orgate(orgate),
	.xnorgate(xnorgate),
	.xorgate(xorgate),
	.sampler_rx(sampler)
);
endmodule

